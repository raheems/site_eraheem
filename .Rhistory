p3<- a3$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a3$R0, digit=3),"and","assumsed reporting =", a3$af*100,"%" ))
a4 <- fit_seir(country = "Bangladesh(unoff)", af=.9, nfuture = 5)
p4<- a4$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a4$R0, digit=3),"and","assumsed reporting =", a4$af*100,"%" ))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 5-day projected incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed, green=Recovered)\n",  today()),
gp=gpar(fontsize=16, font=16)))
# Chunk 5
# Plotting the best fit
p3
# Chunk 6
a3$fitted_cases %>% as.data.frame() %>%
mutate(
Date = date,
`Actual daily cases` = c(0, diff(cum_cases)),
`Actual cumulative cases` = cum_cases,
`Projected cumulative cases` = round(I, digits = 0),
`Projected daily cases` = c(0, diff(`Projected cumulative cases`))
) %>%
select(Date, `Actual daily cases`, `Projected daily cases`,
`Actual cumulative cases`,
`Projected cumulative cases` ) %>%
tail(10) %>%
kable(format = "html",
caption=paste("Predicted new cases for the next 5 days")) %>%
kable_styling(position = "center")
# Chunk 7
nfuture=100
a1 <- fit_seir(country = "Bangladesh(unoff)", af=.25, nfuture = nfuture)
p1<- a1$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a1$R0, digit=3),"and","assumsed reporting =", a1$af*100,"%" ))
a2 <- fit_seir(country = "Bangladesh(unoff)", af=.5, nfuture = nfuture)
p2<- a2$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a2$R0, digit=3),"and","assumsed reporting =", a2$af*100,"%" ))
a3 <- fit_seir(country = "Bangladesh(unoff)", af=.75, nfuture = nfuture)
p3<- a3$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a3$R0, digit=3),"and","assumsed reporting =", a3$af*100,"%" ))
a4 <- fit_seir(country = "Bangladesh(unoff)", af=.9, nfuture = nfuture)
p4<- a4$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
# scale_y_continuous(labels = scales::comma, trans = 'log') +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a4$R0, digit=3),"and","assumsed reporting =", a4$af*100,"%" ))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 100-day projected  incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed)\n",  today()),
gp=gpar(fontsize=16, font=16)))
# grid.arrange(a, b, c, d,ncol=2,
#      nrow=2, top=textGrob("Title", gp=gpar(fontsize=15,font=8)))
blogdown:::serve_site()
# Chunk 1
# Get the data and run the models
# Load packages
require(ggplot2)
require(ggrepel)
require(tidyverse)
require(lubridate)
require(knitr)
require(kableExtra)
library(gsheet)
library(scales)
# Chunk 2
# Bangladesh unofficial data ------
# Update Bangladesh unofficial and official data
sheet_4 = 'https://docs.google.com/spreadsheets/d/1nlAQffAvqChLtvGiJvJPnNOJJKBu_uzmnKdpAJXuPwM/edit#gid=336445634'
df_gogle_sheet = gsheet2tbl(sheet_4)
write_csv(df_gogle_sheet, 'covid19_bd.csv')
df_bd_unoff <- read_csv('covid19_bd.csv', skip = 1)
bd_unoff <- df_bd_unoff %>%
mutate(
country = "Bangladesh(unoff)"
) %>%
rename(
date = Date
, daily_deaths_govt = "দৈনিক মৃত্যু (সরকারি)"
, daily_deaths_suspected = "দৈনিক মৃত্যু (বেসরকারি)"
, total_tests = `Total Tests`
, daily_cases = `Daily new cases`
) %>%
select(
country, date, daily_deaths_suspected, daily_cases
) %>%
drop_na(date) %>%
mutate(
date = as.Date(date, "%d/%m/%Y")
, daily_deaths_suspected = replace_na(as.numeric(daily_deaths_suspected), 0)
, cum_deaths = cumsum(daily_deaths_suspected)
, cum_cases = cumsum(daily_cases)
, cum_recov = NA
) %>%
select(country, date, cum_deaths, cum_cases, cum_recov)
# Chunk 3
library(deSolve)
library(grid)
library(gridExtra)
######################################
## SIER Modeling -------
######################################
# Parameters
# beta = rate of expusore from susceptible infected contact
# sigma = rate at which exposed person becomes infected
# gamma = rate at which infected person recovers
# S = Initial susceptible population
# E = Initial exposed population
# I = Initial infected population
# R = Recovered population
fit_seir <- function(country_name='Bangladesh(unoff)', N=170000000, af=0.5, npast=2, nfuture=10){
# country = Country name
# N = population size of the country
# af = ascertainment factor, default = 0.5
# country = "Bangladesh(unoff)"
# npast = number of days in the past to exclude when fitting the model
# default is npast = 5
# nfuture = number of days in the future the algorithm to predict to
# default is nfuture=10
SEIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dE <- beta * I * S/N - sigma * E
dI <- sigma * E - gamma * I
dR <- gamma * I
list(c(dS, dE, dI, dR))
})
}
# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
names(parameters) <- c("beta", "sigma", "gamma")
out <- ode(y = init, times = Day, func = SEIR, parms = parameters)
fit <- out[, 4]
sum((infected - fit)^2)
}
country = enquo(country_name)
run0_date = ymd("2020-04-17")
df <- bd_unoff %>% filter(country == !!country, cum_cases>0, date <= run0_date)
infected <- df %>% filter(date >= min(date), date <= today() - 1 - npast) %>%
pull(cum_cases)
R = 0; E=0; I = infected[1]; S = N - E - I - R
seir_start_date <- df %>% pull(date) %>% min()
# Ascertainment factor
infected = infected * 1/af
# Create an incrementing Day vector the same length as our
# cases vector
Day <- 1:(length(infected))
# now specify initial values for S, I and R
init <- c(S = S, E=E, I=I, R=R)
# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
opt <- optim(c(.5, .5, .5), RSS, method = "L-BFGS-B",
lower = c(0.01,0.01,0.01), upper = c(.999, .999, .999),
control=list(maxit = 1000))
# check for convergence
opt_msg = opt$message
opt_par <- setNames(opt$par, c("beta", "sigma", "gamma"))
beta = opt_par["beta"]
gamma = opt_par["gamma"]
sigma = opt_par["sigma"]
R0 = as.numeric(beta/gamma)
# time in days for predictions
t <- 1:(as.integer(today() - seir_start_date)  + nfuture)
# get the fitted values from our SEIR model
odefit = ode(y = init, times = t, func = SEIR, parms = opt_par)
fitted_cases <- data.frame(odefit)
# add a Date column and join the observed incidence data
fitted_cases <- fitted_cases %>%
mutate(date = seir_start_date + days(t - 1)) %>%
left_join(df %>% filter(cum_cases>0) %>% ungroup() %>%
select(date, cum_cases))
# Return
list(country=country_name, infected = infected,
opt_msg=opt_msg, opt_par = opt_par, R0=R0, opt_msg=opt_msg,
fitted_cases=fitted_cases, N=N, af=af)
}
# Chunk 4
a1 <- fit_seir(country = "Bangladesh(unoff)",  af=.25, nfuture = 5)
p1<- a1$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a1$R0, digit=3),"and","assumsed reporting =", a1$af*100,"%" ))
a2 <- fit_seir(country = "Bangladesh(unoff)", af=.5, nfuture = 5)
p2<- a2$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a2$R0, digit=3),"and","assumsed reporting =", a2$af*100,"%" ))
a3 <- fit_seir(country = "Bangladesh(unoff)", af=.75, nfuture = 5)
p3<- a3$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a3$R0, digit=3),"and","assumsed reporting =", a3$af*100,"%" ))
a4 <- fit_seir(country = "Bangladesh(unoff)", af=.9, nfuture = 5)
p4<- a4$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a4$R0, digit=3),"and","assumsed reporting =", a4$af*100,"%" ))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 5-day projected incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed, green=Recovered)\n",  today()),
gp=gpar(fontsize=16, font=16)))
# Chunk 5
# Plotting the best fit
p3
# Chunk 6
a3$fitted_cases %>% as.data.frame() %>%
mutate(
Date = date,
`Actual daily cases` = c(0, diff(cum_cases)),
`Actual cumulative cases` = cum_cases,
`Projected cumulative cases` = round(I, digits = 0),
`Projected daily cases` = c(0, diff(`Projected cumulative cases`))
) %>%
select(Date, `Actual daily cases`, `Projected daily cases`,
`Actual cumulative cases`,
`Projected cumulative cases` ) %>%
tail(10) %>%
kable(format = "html",
caption=paste("Predicted new cases for the next 5 days")) %>%
kable_styling(position = "center")
# Chunk 7
nfuture=100
a1 <- fit_seir(country = "Bangladesh(unoff)", af=.25, nfuture = nfuture)
p1<- a1$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a1$R0, digit=3),"and","assumsed reporting =", a1$af*100,"%" ))
a2 <- fit_seir(country = "Bangladesh(unoff)", af=.5, nfuture = nfuture)
p2<- a2$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a2$R0, digit=3),"and","assumsed reporting =", a2$af*100,"%" ))
a3 <- fit_seir(country = "Bangladesh(unoff)", af=.75, nfuture = nfuture)
p3<- a3$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a3$R0, digit=3),"and","assumsed reporting =", a3$af*100,"%" ))
a4 <- fit_seir(country = "Bangladesh(unoff)", af=.9, nfuture = nfuture)
p4<- a4$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
# geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
# scale_y_continuous(labels = scales::comma, trans = 'log') +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a4$R0, digit=3),"and","assumsed reporting =", a4$af*100,"%" ))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 100-day projected  incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed)\n",  today()),
gp=gpar(fontsize=16, font=16)))
# grid.arrange(a, b, c, d,ncol=2,
#      nrow=2, top=textGrob("Title", gp=gpar(fontsize=15,font=8)))
blogdown:::serve_site()
a3$fitted_cases %>% as.data.frame() %>%
mutate(
Date = date,
`Actual daily cases` = c(0, diff(cum_cases)),
`Actual cumulative cases` = cum_cases,
`Projected cumulative cases` = round(I, digits = 0),
`Projected daily cases` = c(0, diff(`Projected cumulative cases`))
) %>%
select(Date, `Actual daily cases`, `Projected daily cases`,
`Actual cumulative cases`,
`Projected cumulative cases` ) %>%
tail(10) %>%
kable(format = "html",
caption=paste("Predicted new cases for the next 5 days")) %>%
kable_styling(position = "center")
Model"}
a3$fitted_cases %>% as.data.frame()
a3$fitted_cases %>% as.data.frame()
a3$fitted_cases %>% as.data.frame()
a3$fitted_cases %>% as.data.frame() %>%
mutate(
Date = date,
`Actual daily cases` = c(0, diff(cum_cases)),
`Actual cumulative cases` = cum_cases,
`Projected cumulative cases` = round(I, digits = 0),
`Projected daily cases` = c(0, diff(`Projected cumulative cases`))
) %>%
select(Date, `Actual daily cases`, `Projected daily cases`,
`Actual cumulative cases`,
`Projected cumulative cases`) %>%
tail(10) %>%
kable(format = "html",
caption=paste("Predicted new cases for the next 5 days")) %>%
kable_styling(position = "center")
library(deSolve)
library(grid)
library(gridExtra)
######################################
## SIER Modeling -------
######################################
# Parameters
# beta = rate of expusore from susceptible infected contact
# sigma = rate at which exposed person becomes infected
# gamma = rate at which infected person recovers
# S = Initial susceptible population
# E = Initial exposed population
# I = Initial infected population
# R = Recovered population
fit_seir <- function(country_name='Bangladesh(unoff)', N=170000000, af=0.5, npast=2, nfuture=10){
# country = Country name
# N = population size of the country
# af = ascertainment factor, default = 0.5
# country = "Bangladesh(unoff)"
# npast = number of days in the past to exclude when fitting the model
# default is npast = 5
# nfuture = number of days in the future the algorithm to predict to
# default is nfuture=10
SEIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S/N
dE <- beta * I * S/N - sigma * E
dI <- sigma * E - gamma * I
dR <- gamma * I
list(c(dS, dE, dI, dR))
})
}
# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
names(parameters) <- c("beta", "sigma", "gamma")
out <- ode(y = init, times = Day, func = SEIR, parms = parameters)
fit <- out[, 4]
sum((infected - fit)^2)
}
country = enquo(country_name)
run0_date = ymd("2020-04-17")
df <- bd_unoff %>% filter(country == !!country, cum_cases>0, date <= run0_date)
infected <- df %>% filter(date >= min(date), date <= today() - 1 - npast) %>%
pull(cum_cases)
R = 0; E=0; I = infected[1]; S = N - E - I - R
seir_start_date <- df %>% pull(date) %>% min()
# Ascertainment factor
infected = infected * 1/af
# Create an incrementing Day vector the same length as our
# cases vector
Day <- 1:(length(infected))
# now specify initial values for S, I and R
init <- c(S = S, E=E, I=I, R=R)
# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
opt <- optim(c(.5, .5, .5), RSS, method = "L-BFGS-B",
lower = c(0.01,0.01,0.01), upper = c(.999, .999, .999),
control=list(maxit = 1000))
# check for convergence
opt_msg = opt$message
opt_par <- setNames(opt$par, c("beta", "sigma", "gamma"))
beta = opt_par["beta"]
gamma = opt_par["gamma"]
sigma = opt_par["sigma"]
R0 = as.numeric(beta/gamma)
# time in days for predictions
t <- 1:(as.integer(today() - seir_start_date)  + nfuture)
# get the fitted values from our SEIR model
odefit = ode(y = init, times = t, func = SEIR, parms = opt_par)
fitted_cases <- data.frame(odefit)
# add a Date column and join the observed incidence data
fitted_cases <- fitted_cases %>%
mutate(date = seir_start_date + days(t - 1)) %>%
left_join(df %>% filter(cum_cases>0) %>% ungroup() %>%
select(date, cum_cases))
# Return
list(country=country_name, infected = infected,
opt_msg=opt_msg, opt_par = opt_par, R0=R0, opt_msg=opt_msg,
fitted_cases=fitted_cases, N=N, af=af)
}
a1 <- fit_seir(country = "Bangladesh(unoff)",  af=.25, nfuture = 5)
a1
p1<- a1$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a1$R0, digit=3),"and","assumsed reporting =", a1$af*100,"%" ))
a2 <- fit_seir(country = "Bangladesh(unoff)", af=.5, nfuture = 5)
p2<- a2$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a2$R0, digit=3),"and","assumsed reporting =", a2$af*100,"%" ))
a3 <- fit_seir(country = "Bangladesh(unoff)", af=.75, nfuture = 5)
p3<- a3$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a3$R0, digit=3),"and","assumsed reporting =", a3$af*100,"%" ))
a4 <- fit_seir(country = "Bangladesh(unoff)", af=.9, nfuture = 5)
p4<- a4$fitted_cases %>%
ggplot(aes(x = date)) +
geom_line(aes(y = I), colour = "red") +
geom_line(aes(y = E), colour = "blue") +
geom_line(aes(y = R), colour = "darkgreen") +
geom_point(aes(y = cum_cases), colour = "orange") +
scale_y_continuous(labels = scales::comma) +
labs(y = "Cumulative incidence",
title = paste("R0 =", format(a4$R0, digit=3),"and","assumsed reporting =", a4$af*100,"%" ))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 5-day projected incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed, green=Recovered)\n",  today()),
gp=gpar(fontsize=16, font=16)))
grid.arrange(grobs = list(p1, p2, p3, p4), ncol=2,
top = textGrob(paste0("COVID-19 observed and 5-day projected incidence for Bangladesh (unofficial)\n(orange=actual cases, red=predicted incidence from SEIR model, blue=Exposed, green=Recovered)\n",  today()),
gp=gpar(fontsize=16, font=16)))
a3
a3$fitted_cases
a3$fitted_cases %>% as.data.frame() %>%
mutate(
Date = date,
`Actual daily cases` = c(0, diff(cum_cases)),
`Actual cumulative cases` = cum_cases,
`Projected cumulative cases` = round(I, digits = 0),
`Projected daily cases` = c(0, diff(`Projected cumulative cases`))
) %>%
select(Date, `Actual daily cases`, `Projected daily cases`,
`Actual cumulative cases`,
`Projected cumulative cases`) %>%
tail(10) %>%
kable(format = "html",
caption=paste("Predicted new cases for the next 5 days")) %>%
kable_styling(position = "center")
