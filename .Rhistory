blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
require(ggplot2)
require(ggrepel)
require(nCov2019)
x <- get_nCov2019(lang = 'en')
y <- load_nCov2019(lang = 'en', source='github')
require(ggplot2)
require(ggrepel)
require(nCov2019)
x <- get_nCov2019(lang = 'en')
y <- load_nCov2019(lang = 'en', source='github')
d = y['global']
d <- d[d$country != "China", ]
n <- d %>%
filter(time == time(y)) %>%
top_n(5, cum_dead) %>%
arrange(desc(cum_dead))
# Plot top 10
dead <- d %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
blogdown:::new_post_addin()
require(ggplot2)
require(ggrepel)
d = y['global']
d <- d[d$country != "China", ]
n <- d %>%
filter(time == time(y)) %>%
top_n(5, cum_dead) %>%
arrange(desc(cum_dead))
# Plot top 10
dead <- d %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
require(ggplot2)
require(ggrepel)
d = y['global']
d <- d[d$country != "China", ]
n <- d %>%
filter(time == time(y)) %>%
top_n(5, cum_dead) %>%
arrange(desc(cum_dead))
n <- d %>%
filter(time == time(y)) %>%
top_n(5, cum_dead) %>% arrange(desc(cum_dead))
n <- d %>%
filter(time == time(y)) %>%
top_n(5, cum_dead)
require(tidyverse)
blogdown:::serve_site()
blogdown:::serve_site()
require(ggplot2)
require(ggrepel)
require(tidyverse)
require(lubridate)
jhu_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
us_confirmed_long_jhu <- read_csv(jhu_url)
df <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country != "China"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
n <- df %>%
group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
) %>%
arrange(desc(max_n_dead)) %>%
top_n(5, max_n_dead)
dead <- df %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
last_reported_date =  mdy("3/26/2020")
ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths", time(y)) +
xlab("Days since first death") +
ylab("Cumulative deaths")
?aes
last_reported_date =  mdy("3/26/2020")
ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths", time(y)) +
xlab("Days since first death") +
ylab("Cumulative deaths")
ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths", time(last_reported_date)) +
xlab("Days since first death") +
ylab("Cumulative deaths")
ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths", time(today)) +
xlab("Days since first death") +
ylab("Cumulative deaths")
today()
last_reported_date
?time
date(last_reported_date)
ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths", date(last_reported_date)) +
xlab("Days since first death") +
ylab("Cumulative deaths")
time(today)
date(today)
today()
blogdown:::serve_site()
blogdown:::serve_site()
require(ggplot2)
require(ggrepel)
require(tidyverse)
require(lubridate)
jhu_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
us_confirmed_long_jhu <- read_csv(jhu_url)
df <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country != "China"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
df_bd <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country == "Bangladesh"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
n_world <- df %>%
group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
) %>%
arrange(desc(max_n_dead)) %>%
top_n(5, max_n_dead)
# n for Bangladesh
n_bd <- df_bd %>% group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
)
# Combined n countries
n <- rbind(n_world, n_bd)
dead <- df %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
last_reported_date =  mdy("3/26/2020")
p <- ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_point(data = dead[dead$country == 'Bangladesh' & mdy(dead$Date)==last_reported_date, ], aes(x=id, y=cum_dead), color='red', size=5) +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths since first death \n(top 5 countries)", as.Date(last_reported_date) ) +
xlab("Days since first death") +
ylab("Cumulative deaths")
ggsave(p, "featured.jpg")
p <- ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_point(data = dead[dead$country == 'Bangladesh' & mdy(dead$Date)==last_reported_date, ], aes(x=id, y=cum_dead), color='red', size=5) +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths since first death \n(top 5 countries)", as.Date(last_reported_date) ) +
xlab("Days since first death") +
ylab("Cumulative deaths")
ggsave("featured.jpg")
install.packages("plotly")
library(plotly)
last_reported_date =  mdy("3/26/2020")
p <- ggplot(dead, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_point(data = dead[dead$country == 'Bangladesh' & mdy(dead$Date)==last_reported_date, ], aes(x=id, y=cum_dead), color='red', size=5) +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths since first death \n(top 5 countries)", as.Date(last_reported_date) ) +
xlab("Days since first death") +
ylab("Cumulative deaths")
ggplotly()
blogdown:::serve_site()
blogdown:::serve_site()
require(ggplot2)
require(ggrepel)
require(tidyverse)
require(lubridate)
jhu_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
us_confirmed_long_jhu <- read_csv(jhu_url)
df <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country != "China"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
df_bd <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country == "Bangladesh"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
n_world <- df %>%
group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
) %>%
arrange(desc(max_n_dead)) %>%
top_n(5, max_n_dead)
# n for Bangladesh
n_bd <- df_bd %>% group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
)
# Combined n countries
n <- rbind(n_world, n_bd)
dead <- df %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
table( df$country)
df_south_asia <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country %in% c("Bangladesh", "India", "Singapore", "Nepal", "Pakistan",
"Bhutan", "Sri Lanka")
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
View(df_south_asia)
table(df_south_asia$country)
df_south_asia <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country %in% c("Bangladesh", "India", "Singapore", "Nepal", "Pakistan",
"Bhutan", "Sri Lanka", "Malaysia", "Maldives",
"Indonesia", "Uganda")
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
n_south_asia <- df_south_asia %>%
group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
) %>%
arrange(desc(max_n_dead)) %>%
top_n(10, max_n_dead)
View(n_south_asia)
dead_south_asia <- df_south_asia %>%
filter(country %in% n_south_asia$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
View(dead_south_asia)
# Plot
ggplot(dead_south_asia, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_point(data = dead[dead$country == 'Bangladesh' & mdy(dead$Date)==last_reported_date, ], aes(x=id, y=cum_dead), color='red', size=5) +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths since first death \n(top 5 countries)", as.Date(last_reported_date) ) +
xlab("Days since first death") +
ylab("Cumulative deaths")
last_reported_date =  mdy("3/26/2020")
# Plot
ggplot(dead_south_asia, aes(x = id, y = cum_dead, color=country)) +
geom_line() +
geom_point(data = dead[dead$country == 'Bangladesh' & mdy(dead$Date)==last_reported_date, ], aes(x=id, y=cum_dead), color='red', size=5) +
geom_text_repel(aes(label=country),
function(df) df[mdy(df$Date) == last_reported_date, ])+
theme_minimal(base_size = 14) +
theme(legend.position = "none") +
# theme_void() +
theme(legend.position="none") +
ggtitle("COVID19 cumulative deaths since first death \n(top 5 countries)", as.Date(last_reported_date) ) +
xlab("Days since first death") +
ylab("Cumulative deaths")
# Summary of deaths till date by country
dead_south_asia %>%
filter(mdy(Date) == last_reported_date) %>%
group_by(country) %>%
summarise(
TotalDeath = max(cum_dead)
)
# Summary of deaths till date by country
dead_south_asia %>%
filter(mdy(Date) == last_reported_date) %>%
group_by(country) %>%
summarise(
TotalDeath = max(cum_dead)
) %>%
arrange(desc(otalDeath))
# Summary of deaths till date by country
dead_south_asia %>%
filter(mdy(Date) == last_reported_date) %>%
group_by(country) %>%
summarise(
TotalDeath = max(cum_dead)
) %>%
arrange(desc(TotalDeath))
# Summary of deaths till date by country
sa_summary <- dead_south_asia %>%
filter(mdy(Date) == last_reported_date) %>%
group_by(country) %>%
summarise(
TotalDeath = max(cum_dead)
) %>%
arrange(desc(TotalDeath))
knitr::kable(sa_summary, "markdown")
jhu_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
us_confirmed_long_jhu <- read_csv(jhu_url)
df <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country != "China"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
df_bd <- us_confirmed_long_jhu %>%
rename(province = "Province/State",
country = "Country/Region") %>%
# Exclude China
filter(
country == "Bangladesh"
) %>%
pivot_longer(-c(province, country, Lat, Long),
names_to = "Date", values_to = "cum_dead") %>%
select(country, Date, cum_dead) %>%
group_by(country, Date) %>%
summarize(
cum_dead = sum(cum_dead)
)
n_world <- df %>%
group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
) %>%
arrange(desc(max_n_dead)) %>%
top_n(5, max_n_dead)
# n for Bangladesh
n_bd <- df_bd %>% group_by(country) %>%
summarise(
max_n_dead = max(cum_dead)
)
# Combined n countries
n <- rbind(n_world, n_bd)
dead <- df %>%
filter(country %in% n$country, cum_dead >0) %>%
arrange(country, cum_dead) %>%
group_by(country) %>%
mutate(
id = row_number()
)
clsas(df$Date)
class(df$Date)
df$Date
mdy(df$Date)
max(mdy(df$Date))
jhu_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
us_confirmed_long_jhu <- read_csv(jhu_url)
jhu_deaths_global <- paste("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = "")
jhu_deaths_global_long <- read_csv(jhu_deaths_global)
# Load packages
require(ggplot2)
require(ggrepel)
require(tidyverse)
require(lubridate)
require(knitr)
require(kableExtra)
jhu_deaths_global_long <- read_csv(jhu_deaths_global)
